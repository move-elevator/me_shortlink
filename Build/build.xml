<?xml version="1.0" encoding="UTF-8"?>
<project name="check-extension-me_shortlink" default="check" basedir="../">
	<property name="output" location="${basedir}/build"/>

	<property name="php" value="php"/>
	<property name="extdir" location="${basedir}/typo3conf/ext"/>
	<property name="bindir" location="${basedir}/Build/bin"/>
	<property name="builddir" location="${basedir}/Build"/>

	<target name="check" depends="prepare, vendors, simple-tools, php-tools"/>

	<target name="vendors" description="Update vendors">
		<exec dir="${basedir}" executable="bash" failonerror="true">
			<arg value="-c"/>
			<arg value="curl -sS https://getcomposer.org/installer | ${php}"/>
		</exec>
		<exec dir="${basedir}" executable="${php}" failonerror="true">
			<arg value="composer.phar"/>
			<arg value="update"/>
		</exec>
	</target>

	<target name="simple-tools" description="Run simple tools">
		<parallel>
			<antcall target="lint"/>
		</parallel>
	</target>

	<target name="php-tools" description="Run php tools">
		<parallel threadCount="4">
			<antcall target="phpcpd"/>
			<antcall target="phpmd"/>
			<antcall target="phpcs"/>
			<antcall target="phploc"/>
			<antcall target="phpmetrics"/>
		</parallel>
	</target>

	<target name="clean" description="Cleanup build artifacts">
		<delete dir="${builddir}/logs"/>
		<delete dir="${builddir}/phpmetrics"/>
	</target>

	<target name="prepare" depends="clean" description="Prepare for build">
		<mkdir dir="${builddir}/logs"/>
		<mkdir dir="${builddir}/phpmetrics"/>
	</target>

	<target name="lint" description="Perform syntax check of sourcecode files">
		<apply executable="${php}" failonerror="true">
			<arg value="-l"/>
			<fileset dir="${basedir}">
				<modified/>
				<include name="**/*.php"/>
				<exclude name="**/vendor/**"/>
			</fileset>
		</apply>
	</target>

	<target name="phploc" description="Measure project size using PHPLOC">
		<exec executable="${php}">
			<arg value="${bindir}/phploc"/>
			<arg value="--count-tests"/>
			<arg value="--log-xml"/>
			<arg value="${builddir}/logs/phploc.xml"/>
			<arg value="--exclude=${basedir}vendor"/>
			<arg path="${basedir}"/>
		</exec>
	</target>

	<target name="phpcpd" description="Find duplicate code using PHPCPD">
		<exec executable="${php}" failonerror="false">
			<arg value="${bindir}/phpcpd"/>
			<arg value="--log-pmd"/>
			<arg value="${builddir}/logs/pmd-cpd.xml"/>
			<arg value="--exclude=vendor"/>
			<arg path="${basedir}"/>
		</exec>
	</target>

	<target name="phpmetrics" description="Gives metrics about PHP project and classes.">
		<exec dir="${basedir}" executable="${php}" failonerror="true">
			<arg value="/usr/local/bin/phpmetrics.phar"/>
			<arg line="--report-html=${builddir}/phpmetrics/report.html"/>
			<arg line="--report-xml=${builddir}/phpmetrics/report.xml"/>
			<arg line="--chart-bubbles=${builddir}/phpmetrics/chart.svg"/>
			<arg line="--excluded-dirs=vendor|Tests"/>
			<arg value="${basedir}"/>
		</exec>
	</target>

	<target name="phpmd" description="Perform project mess detection using PHPMD and log result in XML format">
		<exec executable="${php}" failonerror="false">
			<arg value="${bindir}/phpmd"/>
			<arg path="${basedir}"/>
			<arg value="xml"/>
			<arg path="${builddir}/phpmd.xml"/>
			<arg value="--reportfile"/>
			<arg path="${builddir}/logs/pmd.xml"/>
			<arg line="--exclude vendor/*"/>
		</exec>
	</target>

	<target name="phpcs"
			description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
		<exec executable="${php}" output="/dev/null" failonerror="false">
			<arg value="${bindir}/phpcs"/>
			<arg value="--report=checkstyle"/>
			<arg value="--report-checkstyle=${builddir}/logs/checkstyle.xml"/>
			<arg value="--standard=TYPO3CMS"/>
			<arg value="--extensions=php"/>
			<arg value="--ignore=vendor,tests,public/js,build"/>
			<arg path="${basedir}"/>
		</exec>
	</target>
</project>
